services:

### APPLICATION PART

  fact-generator:
    build:
      context: ./fact-generator
    ports:
      - "5001:5001"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=fact-generator  
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_PYTHON_DISABLED_INSTRUMENTATIONS=aws_lambda
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  image-generator:
    build:
      context: ./image-generator
    ports:
      - "5002:5002"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=image-generator  
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_PYTHON_DISABLED_INSTRUMENTATIONS=aws_lambda
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  image-database:
    image: ${IMAGE_DATABASE_IMAGE}
    ports:
      - "8080:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=image-database
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_JAVAAGENT_ENABLED=true 
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # image-gen-store:
  #   image: ${IMAGE_GEN_STORE_IMAGE}
  #   ports:
  #     - "8081:8081" 
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
  #     - OTEL_RESOURCE_ATTRIBUTES=service.name=image-gen-store
  #     - OTEL_METRICS_EXPORTER=otlp
  #     - OTEL_TRACES_EXPORTER=otlp
  #     - OTEL_PYTHON_DISABLED_INSTRUMENTATIONS=aws_lambda
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}

  postgres:
    image: 'postgres:latest'
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USERNAME}
    ports:
      - '5432:5432'


# OpenTelemetry Collector
  otelcol:
    image: ${OTEL_COLLECTOR_IMAGE}
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./config/otel-collector-config.yml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"
    depends_on:
    # - jaeger
    - tempo

  # Prometheus
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      # - --web.enable-otlp-receiver
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus-config.yaml
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"

# Grafana and Grafana Tempo
  grafana:
    image: ${GRAFANA_IMAGE}
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"

  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "5555:4317" # otlp grpc
    depends_on:
      - init

